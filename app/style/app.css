/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */img,legend{border:0}legend,td,th{padding:0}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre,textarea{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none} input[type=reset],button,html input[type=button],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}.editor,.editor textarea,.preview{height:100%;width:100%}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{}table{border-collapse:collapse;border-spacing:0}.editor textarea{outline:0;border:1px solid grey;padding:8px;border-bottom-left-radius:4px}.editor textarea::-webkit-input-placeholder{color:#CCC}.footer{width:100%;margin-top:-56px;z-index:1000;text-align:right;padding-right:10px}.preview{border:1px solid grey;padding:8px;overflow-y:scroll}.preview img{max-width:100%}.preview table{border:1px solid #ccc;border-radius:4px;background-color:#f5f5f5;margin-bottom:10px}.preview table tr th,.tabs,.tabs .tab-item{background:#eee}.preview table tr td,.preview table tr th{padding:1px 4px;border:1px solid grey}.tabs{width:100%;padding:3px 4px 0;margin:0 0 -1px}.tabs .tab-item{display:inline-block;padding:3px 9px;border:1px solid grey;border-top:3px solid #999;border-top-left-radius:4px;border-top-right-radius:4px;cursor:pointer}.tabs .tab-item .title{user-select:none;-webkit-user-select:none}.tabs .tab-item.active{border-top:4px solid #6495ed}.tabs .tab-item .unsaved{display:inline-block;width:8px;height:8px;border-radius:50%;background:#6495ed;border:1px solid #666;top:-1px;margin:0 2px}.tabs .tab-item .close{opacity:.8}.page-editor{background:#eee;padding:0 4px 60px;height:100%;overflow:hidden}.page-editor .editor-div,.page-editor .preview-div{padding:0!important;height:100%;width:50%;display:inline-block;box-sizing:border-box;float:left}.presentation-mode .editor-div,.presentation-mode .tabs{display:none!important}.page-editor .editor-div{margin-right:-1px}.math-block{text-align:center}.presentation-mode ::-webkit-scrollbar{display:none!important}.presentation-mode .preview-div{width:100%!important;background:#fff!important}.presentation-mode .preview{border:none!important;background:#fff!important;border-bottom-right-radius:0!important}@media screen{.presentation-mode *{overflow:scroll!important}}@media print{.presentation-mode *{overflow:visible!important}}@page{size:21cm 29.7cm;margin:10mm 15mm 10mm 15mm}body,body>div,body>div>ui-view,html{height:100%}body{overflow:hidden}
/*# sourceMappingURL=data:application/json;base64, */
